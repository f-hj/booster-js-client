"use strict";
// tslint:disable
/**
 * Booster back
 * Booster global API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var globalImportUrl = require("url");
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("./base");
/**
 * BrandsApi - axios parameter creator
 * @export
 */
exports.BrandsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a brand
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrand: function (inlineObject, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/brands/brand";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a brand
         * @param {string} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrand: function (brandId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'brandId' is not null or undefined
            if (brandId === null || brandId === undefined) {
                throw new base_1.RequiredError('brandId', 'Required parameter brandId was null or undefined when calling deleteBrand.');
            }
            var localVarPath = "/v1/brands/brand/{brandId}"
                .replace("{" + "brandId" + "}", encodeURIComponent(String(brandId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a brand
         * @param {string} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrand: function (brandId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'brandId' is not null or undefined
            if (brandId === null || brandId === undefined) {
                throw new base_1.RequiredError('brandId', 'Required parameter brandId was null or undefined when calling getBrand.');
            }
            var localVarPath = "/v1/brands/brand/{brandId}"
                .replace("{" + "brandId" + "}", encodeURIComponent(String(brandId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a brand with logs
         * @param {string} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandLogs: function (brandId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'brandId' is not null or undefined
            if (brandId === null || brandId === undefined) {
                throw new base_1.RequiredError('brandId', 'Required parameter brandId was null or undefined when calling getBrandLogs.');
            }
            var localVarPath = "/v1/brands/brandLogs/{brandId}"
                .replace("{" + "brandId" + "}", encodeURIComponent(String(brandId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Invite a user to a brand
         * @param {string} brandId Brand ID
         * @param {InlineObject2} [inlineObject2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser: function (brandId, inlineObject2, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'brandId' is not null or undefined
            if (brandId === null || brandId === undefined) {
                throw new base_1.RequiredError('brandId', 'Required parameter brandId was null or undefined when calling inviteUser.');
            }
            var localVarPath = "/v1/brands/brand/{brandId}/inviteUser"
                .replace("{" + "brandId" + "}", encodeURIComponent(String(brandId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof inlineObject2 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {}) : (inlineObject2 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List all brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBrands: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/brands/brands";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List my brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyBrands: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/brands/myBrands";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a brand
         * @param {string} brandId Brand ID
         * @param {InlineObject1} [inlineObject1]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBrand: function (brandId, inlineObject1, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'brandId' is not null or undefined
            if (brandId === null || brandId === undefined) {
                throw new base_1.RequiredError('brandId', 'Required parameter brandId was null or undefined when calling updateBrand.');
            }
            var localVarPath = "/v1/brands/brand/{brandId}"
                .replace("{" + "brandId" + "}", encodeURIComponent(String(brandId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof inlineObject1 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {}) : (inlineObject1 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * BrandsApi - functional programming interface
 * @export
 */
exports.BrandsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create a brand
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrand: function (inlineObject, options) {
            var localVarAxiosArgs = exports.BrandsApiAxiosParamCreator(configuration).createBrand(inlineObject, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Delete a brand
         * @param {string} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrand: function (brandId, options) {
            var localVarAxiosArgs = exports.BrandsApiAxiosParamCreator(configuration).deleteBrand(brandId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get a brand
         * @param {string} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrand: function (brandId, options) {
            var localVarAxiosArgs = exports.BrandsApiAxiosParamCreator(configuration).getBrand(brandId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get a brand with logs
         * @param {string} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandLogs: function (brandId, options) {
            var localVarAxiosArgs = exports.BrandsApiAxiosParamCreator(configuration).getBrandLogs(brandId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Invite a user to a brand
         * @param {string} brandId Brand ID
         * @param {InlineObject2} [inlineObject2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser: function (brandId, inlineObject2, options) {
            var localVarAxiosArgs = exports.BrandsApiAxiosParamCreator(configuration).inviteUser(brandId, inlineObject2, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List all brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBrands: function (options) {
            var localVarAxiosArgs = exports.BrandsApiAxiosParamCreator(configuration).listBrands(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List my brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyBrands: function (options) {
            var localVarAxiosArgs = exports.BrandsApiAxiosParamCreator(configuration).listMyBrands(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update a brand
         * @param {string} brandId Brand ID
         * @param {InlineObject1} [inlineObject1]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBrand: function (brandId, inlineObject1, options) {
            var localVarAxiosArgs = exports.BrandsApiAxiosParamCreator(configuration).updateBrand(brandId, inlineObject1, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * BrandsApi - factory interface
 * @export
 */
exports.BrandsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create a brand
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrand: function (inlineObject, options) {
            return exports.BrandsApiFp(configuration).createBrand(inlineObject, options)(axios, basePath);
        },
        /**
         *
         * @summary Delete a brand
         * @param {string} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrand: function (brandId, options) {
            return exports.BrandsApiFp(configuration).deleteBrand(brandId, options)(axios, basePath);
        },
        /**
         *
         * @summary Get a brand
         * @param {string} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrand: function (brandId, options) {
            return exports.BrandsApiFp(configuration).getBrand(brandId, options)(axios, basePath);
        },
        /**
         *
         * @summary Get a brand with logs
         * @param {string} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandLogs: function (brandId, options) {
            return exports.BrandsApiFp(configuration).getBrandLogs(brandId, options)(axios, basePath);
        },
        /**
         *
         * @summary Invite a user to a brand
         * @param {string} brandId Brand ID
         * @param {InlineObject2} [inlineObject2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser: function (brandId, inlineObject2, options) {
            return exports.BrandsApiFp(configuration).inviteUser(brandId, inlineObject2, options)(axios, basePath);
        },
        /**
         *
         * @summary List all brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBrands: function (options) {
            return exports.BrandsApiFp(configuration).listBrands(options)(axios, basePath);
        },
        /**
         *
         * @summary List my brands
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyBrands: function (options) {
            return exports.BrandsApiFp(configuration).listMyBrands(options)(axios, basePath);
        },
        /**
         *
         * @summary Update a brand
         * @param {string} brandId Brand ID
         * @param {InlineObject1} [inlineObject1]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBrand: function (brandId, inlineObject1, options) {
            return exports.BrandsApiFp(configuration).updateBrand(brandId, inlineObject1, options)(axios, basePath);
        },
    };
};
/**
 * BrandsApi - object-oriented interface
 * @export
 * @class BrandsApi
 * @extends {BaseAPI}
 */
var BrandsApi = /** @class */ (function (_super) {
    __extends(BrandsApi, _super);
    function BrandsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create a brand
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    BrandsApi.prototype.createBrand = function (inlineObject, options) {
        return exports.BrandsApiFp(this.configuration).createBrand(inlineObject, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Delete a brand
     * @param {string} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    BrandsApi.prototype.deleteBrand = function (brandId, options) {
        return exports.BrandsApiFp(this.configuration).deleteBrand(brandId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get a brand
     * @param {string} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    BrandsApi.prototype.getBrand = function (brandId, options) {
        return exports.BrandsApiFp(this.configuration).getBrand(brandId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get a brand with logs
     * @param {string} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    BrandsApi.prototype.getBrandLogs = function (brandId, options) {
        return exports.BrandsApiFp(this.configuration).getBrandLogs(brandId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Invite a user to a brand
     * @param {string} brandId Brand ID
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    BrandsApi.prototype.inviteUser = function (brandId, inlineObject2, options) {
        return exports.BrandsApiFp(this.configuration).inviteUser(brandId, inlineObject2, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary List all brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    BrandsApi.prototype.listBrands = function (options) {
        return exports.BrandsApiFp(this.configuration).listBrands(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary List my brands
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    BrandsApi.prototype.listMyBrands = function (options) {
        return exports.BrandsApiFp(this.configuration).listMyBrands(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Update a brand
     * @param {string} brandId Brand ID
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    BrandsApi.prototype.updateBrand = function (brandId, inlineObject1, options) {
        return exports.BrandsApiFp(this.configuration).updateBrand(brandId, inlineObject1, options)(this.axios, this.basePath);
    };
    return BrandsApi;
}(base_1.BaseAPI));
exports.BrandsApi = BrandsApi;
/**
 * ImagesApi - axios parameter creator
 * @export
 */
exports.ImagesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get an image from id
         * @param {string} imageId Image ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImage: function (imageId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'imageId' is not null or undefined
            if (imageId === null || imageId === undefined) {
                throw new base_1.RequiredError('imageId', 'Required parameter imageId was null or undefined when calling getImage.');
            }
            var localVarPath = ("/v1/images/image/" + imageId)
                .replace("{" + "imageId" + "}", encodeURIComponent(String(imageId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Post an image for a product
         * @param {string} productId Product ID
         * @param {InlineObject3} [inlineObject3]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productImageUpload: function (productId, inlineObject3, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling productImageUpload.');
            }
            var localVarPath = ("/v1/images/product/" + productId)
                .replace("{" + "productId" + "}", encodeURIComponent(String(productId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof inlineObject3 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {}) : (inlineObject3 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ImagesApi - functional programming interface
 * @export
 */
exports.ImagesApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get an image from id
         * @param {string} imageId Image ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImage: function (imageId, options) {
            var localVarAxiosArgs = exports.ImagesApiAxiosParamCreator(configuration).getImage(imageId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Post an image for a product
         * @param {string} productId Product ID
         * @param {InlineObject3} [inlineObject3]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productImageUpload: function (productId, inlineObject3, options) {
            var localVarAxiosArgs = exports.ImagesApiAxiosParamCreator(configuration).productImageUpload(productId, inlineObject3, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ImagesApi - factory interface
 * @export
 */
exports.ImagesApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get an image from id
         * @param {string} imageId Image ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImage: function (imageId, options) {
            return exports.ImagesApiFp(configuration).getImage(imageId, options)(axios, basePath);
        },
        /**
         *
         * @summary Post an image for a product
         * @param {string} productId Product ID
         * @param {InlineObject3} [inlineObject3]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productImageUpload: function (productId, inlineObject3, options) {
            return exports.ImagesApiFp(configuration).productImageUpload(productId, inlineObject3, options)(axios, basePath);
        },
    };
};
/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
var ImagesApi = /** @class */ (function (_super) {
    __extends(ImagesApi, _super);
    function ImagesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get an image from id
     * @param {string} imageId Image ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    ImagesApi.prototype.getImage = function (imageId, options) {
        return exports.ImagesApiFp(this.configuration).getImage(imageId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Post an image for a product
     * @param {string} productId Product ID
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    ImagesApi.prototype.productImageUpload = function (productId, inlineObject3, options) {
        return exports.ImagesApiFp(this.configuration).productImageUpload(productId, inlineObject3, options)(this.axios, this.basePath);
    };
    return ImagesApi;
}(base_1.BaseAPI));
exports.ImagesApi = ImagesApi;
/**
 * ProductsApi - axios parameter creator
 * @export
 */
exports.ProductsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a product
         * @param {InlineObject4} [inlineObject4]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: function (inlineObject4, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/products/product";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof inlineObject4 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject4 !== undefined ? inlineObject4 : {}) : (inlineObject4 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get current product
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: function (productId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling getProduct.');
            }
            var localVarPath = ("/v1/products/product/" + productId)
                .replace("{" + "productId" + "}", encodeURIComponent(String(productId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get current product with logs
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductLogs: function (productId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling getProductLogs.');
            }
            var localVarPath = ("/v1/products/productLogs/" + productId)
                .replace("{" + "productId" + "}", encodeURIComponent(String(productId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get current product
         * @param {string} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBrandProducts: function (brandId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'brandId' is not null or undefined
            if (brandId === null || brandId === undefined) {
                throw new base_1.RequiredError('brandId', 'Required parameter brandId was null or undefined when calling listBrandProducts.');
            }
            var localVarPath = ("/v1/products/brand/" + brandId)
                .replace("{" + "brandId" + "}", encodeURIComponent(String(brandId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a product
         * @param {string} productId Product ID
         * @param {InlineObject5} [inlineObject5]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: function (productId, inlineObject5, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new base_1.RequiredError('productId', 'Required parameter productId was null or undefined when calling updateProduct.');
            }
            var localVarPath = "/v1/products/product/{productId}"
                .replace("{" + "productId" + "}", encodeURIComponent(String(productId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof inlineObject5 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject5 !== undefined ? inlineObject5 : {}) : (inlineObject5 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProductsApi - functional programming interface
 * @export
 */
exports.ProductsApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create a product
         * @param {InlineObject4} [inlineObject4]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: function (inlineObject4, options) {
            var localVarAxiosArgs = exports.ProductsApiAxiosParamCreator(configuration).createProduct(inlineObject4, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get current product
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: function (productId, options) {
            var localVarAxiosArgs = exports.ProductsApiAxiosParamCreator(configuration).getProduct(productId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get current product with logs
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductLogs: function (productId, options) {
            var localVarAxiosArgs = exports.ProductsApiAxiosParamCreator(configuration).getProductLogs(productId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get current product
         * @param {string} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBrandProducts: function (brandId, options) {
            var localVarAxiosArgs = exports.ProductsApiAxiosParamCreator(configuration).listBrandProducts(brandId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update a product
         * @param {string} productId Product ID
         * @param {InlineObject5} [inlineObject5]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: function (productId, inlineObject5, options) {
            var localVarAxiosArgs = exports.ProductsApiAxiosParamCreator(configuration).updateProduct(productId, inlineObject5, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ProductsApi - factory interface
 * @export
 */
exports.ProductsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create a product
         * @param {InlineObject4} [inlineObject4]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: function (inlineObject4, options) {
            return exports.ProductsApiFp(configuration).createProduct(inlineObject4, options)(axios, basePath);
        },
        /**
         *
         * @summary Get current product
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: function (productId, options) {
            return exports.ProductsApiFp(configuration).getProduct(productId, options)(axios, basePath);
        },
        /**
         *
         * @summary Get current product with logs
         * @param {string} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductLogs: function (productId, options) {
            return exports.ProductsApiFp(configuration).getProductLogs(productId, options)(axios, basePath);
        },
        /**
         *
         * @summary Get current product
         * @param {string} brandId Brand ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBrandProducts: function (brandId, options) {
            return exports.ProductsApiFp(configuration).listBrandProducts(brandId, options)(axios, basePath);
        },
        /**
         *
         * @summary Update a product
         * @param {string} productId Product ID
         * @param {InlineObject5} [inlineObject5]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: function (productId, inlineObject5, options) {
            return exports.ProductsApiFp(configuration).updateProduct(productId, inlineObject5, options)(axios, basePath);
        },
    };
};
/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
var ProductsApi = /** @class */ (function (_super) {
    __extends(ProductsApi, _super);
    function ProductsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create a product
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ProductsApi.prototype.createProduct = function (inlineObject4, options) {
        return exports.ProductsApiFp(this.configuration).createProduct(inlineObject4, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get current product
     * @param {string} productId Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ProductsApi.prototype.getProduct = function (productId, options) {
        return exports.ProductsApiFp(this.configuration).getProduct(productId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get current product with logs
     * @param {string} productId Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ProductsApi.prototype.getProductLogs = function (productId, options) {
        return exports.ProductsApiFp(this.configuration).getProductLogs(productId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get current product
     * @param {string} brandId Brand ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ProductsApi.prototype.listBrandProducts = function (brandId, options) {
        return exports.ProductsApiFp(this.configuration).listBrandProducts(brandId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Update a product
     * @param {string} productId Product ID
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    ProductsApi.prototype.updateProduct = function (productId, inlineObject5, options) {
        return exports.ProductsApiFp(this.configuration).updateProduct(productId, inlineObject5, options)(this.axios, this.basePath);
    };
    return ProductsApi;
}(base_1.BaseAPI));
exports.ProductsApi = ProductsApi;
/**
 * StatusApi - axios parameter creator
 * @export
 */
exports.StatusApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get current status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/status";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StatusApi - functional programming interface
 * @export
 */
exports.StatusApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get current status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: function (options) {
            var localVarAxiosArgs = exports.StatusApiAxiosParamCreator(configuration).getStatus(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * StatusApi - factory interface
 * @export
 */
exports.StatusApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get current status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: function (options) {
            return exports.StatusApiFp(configuration).getStatus(options)(axios, basePath);
        },
    };
};
/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
var StatusApi = /** @class */ (function (_super) {
    __extends(StatusApi, _super);
    function StatusApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get current status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    StatusApi.prototype.getStatus = function (options) {
        return exports.StatusApiFp(this.configuration).getStatus(options)(this.axios, this.basePath);
    };
    return StatusApi;
}(base_1.BaseAPI));
exports.StatusApi = StatusApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
exports.UsersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create an user
         * @param {InlineObject6} [inlineObject6]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (inlineObject6, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/users";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof inlineObject6 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject6 !== undefined ? inlineObject6 : {}) : (inlineObject6 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get current logged user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyself: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/users/me";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get an user
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (userId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getUser.');
            }
            var localVarPath = "/v1/users/user/{userId}"
                .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/users/users";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                var accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Login an user
         * @param {InlineObject7} [inlineObject7]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: function (inlineObject7, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/v1/users/login";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign(__assign({}, localVarHeaderParameter), options.headers);
            var needsSerialization = (typeof inlineObject7 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject7 !== undefined ? inlineObject7 : {}) : (inlineObject7 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UsersApi - functional programming interface
 * @export
 */
exports.UsersApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create an user
         * @param {InlineObject6} [inlineObject6]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (inlineObject6, options) {
            var localVarAxiosArgs = exports.UsersApiAxiosParamCreator(configuration).createUser(inlineObject6, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get current logged user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyself: function (options) {
            var localVarAxiosArgs = exports.UsersApiAxiosParamCreator(configuration).getMyself(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get an user
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (userId, options) {
            var localVarAxiosArgs = exports.UsersApiAxiosParamCreator(configuration).getUser(userId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (options) {
            var localVarAxiosArgs = exports.UsersApiAxiosParamCreator(configuration).listUsers(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Login an user
         * @param {InlineObject7} [inlineObject7]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: function (inlineObject7, options) {
            var localVarAxiosArgs = exports.UsersApiAxiosParamCreator(configuration).loginUser(inlineObject7, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * UsersApi - factory interface
 * @export
 */
exports.UsersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create an user
         * @param {InlineObject6} [inlineObject6]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (inlineObject6, options) {
            return exports.UsersApiFp(configuration).createUser(inlineObject6, options)(axios, basePath);
        },
        /**
         *
         * @summary Get current logged user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyself: function (options) {
            return exports.UsersApiFp(configuration).getMyself(options)(axios, basePath);
        },
        /**
         *
         * @summary Get an user
         * @param {string} userId User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: function (userId, options) {
            return exports.UsersApiFp(configuration).getUser(userId, options)(axios, basePath);
        },
        /**
         *
         * @summary List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: function (options) {
            return exports.UsersApiFp(configuration).listUsers(options)(axios, basePath);
        },
        /**
         *
         * @summary Login an user
         * @param {InlineObject7} [inlineObject7]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: function (inlineObject7, options) {
            return exports.UsersApiFp(configuration).loginUser(inlineObject7, options)(axios, basePath);
        },
    };
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
var UsersApi = /** @class */ (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create an user
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.createUser = function (inlineObject6, options) {
        return exports.UsersApiFp(this.configuration).createUser(inlineObject6, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get current logged user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getMyself = function (options) {
        return exports.UsersApiFp(this.configuration).getMyself(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get an user
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.getUser = function (userId, options) {
        return exports.UsersApiFp(this.configuration).getUser(userId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.listUsers = function (options) {
        return exports.UsersApiFp(this.configuration).listUsers(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Login an user
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.loginUser = function (inlineObject7, options) {
        return exports.UsersApiFp(this.configuration).loginUser(inlineObject7, options)(this.axios, this.basePath);
    };
    return UsersApi;
}(base_1.BaseAPI));
exports.UsersApi = UsersApi;
